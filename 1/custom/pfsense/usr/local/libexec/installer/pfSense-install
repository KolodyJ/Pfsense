#!/bin/sh
#
# pfSense Installer pfSense-install module.
#
# part of pfSense (https://www.pfsense.org)
# Copyright (c) 2023-2024 Rubicon Communications, LLC (Netgate)
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

INSTALL_INC_PATH="/usr/local/libexec/installer"
. "${INSTALL_INC_PATH}/pfSense-common"
. "${INSTALL_INC_PATH}/pfSense-LED"

CERTS_PATH="/etc/ssl/certs"
RESOLV_CONF="/etc/resolv.conf"
BOOTSTRAP_FILES="/etc/master.passwd /etc/group /etc/rc.subr /etc/services \
/etc/shells /bin/kenv /bin/sh /usr/bin/tar /usr/bin/uname /usr/sbin/pkg \
/usr/sbin/service /libexec/ld-elf.so.1"
DIR_INIT_CREATE="/boot /boot/loader.conf.d /cf/conf"

chroot_setup() {
	local _destdir
	[ "${#}" -ne 1 ] && return 1
	_destdir="${1}"

	unset _CHROOT_DIR

	# Copy the CA certificates
	/bin/mkdir -p "$(dirname "${_destdir}${CERTS_PATH}")"
	/bin/cp -rp "${CERTS_PATH}" "$(dirname "${_destdir}${CERTS_PATH}")"

	# Copy the resolv.conf
	/bin/cp "${RESOLV_CONF}" "${_destdir}${RESOLV_CONF}"

	# Copy the necessary bootstrap files to run pkg.
	for file in ${BOOTSTRAP_FILES}
	do
		/bin/mkdir -p "$(dirname "${_destdir}${file}")"
		/bin/cp "${file}" "${_destdir}${file}" 2> /dev/null
		for lib in $(ldd ${file} 2> /dev/null | \
		    /usr/bin/grep "=>" | "${AWK}" '{ printf "%s\n", $3 }')
		do
			/bin/mkdir -p "$(dirname "${_destdir}${lib}")"
			/bin/cp "${lib}" "${_destdir}${lib}" 2> /dev/null
		done
	done

	# Build the master.passwd database.
	/usr/sbin/pwd_mkdb -p -d "${_destdir}/etc" "${_destdir}/etc/master.passwd"

	# Remove the installer user from the installed copy.
	/usr/sbin/pw -R "${_destdir}" userdel installer

	# Mount /dev
	if [ ! -d "${_destdir}/dev" ]; then
		/bin/mkdir "${_destdir}/dev"
	fi
	/sbin/mount -t devfs -o nocover devfs "${_destdir}/dev" 2>/dev/null
	_CHROOT_DIR="${_destdir}"
	return 0
}

chroot_cleanup() {
	[ -z "${_CHROOT_DIR}" ] && return 1
	"${UMOUNT}" "${_CHROOT_DIR}/dev"
	/bin/rm -f "${_CHROOT_DIR}${RESOLV_CONF}"
	unset ${_CHROOT_DIR}
	return 0
}

pfSense_install() {
	local _destdir _model
	[ "${#}" -lt 1 ] && return 1
	_destdir="${1}"
	[ "${#}" -gt 1 ] && _model="${2}"

	for dir in ${DIR_INIT_CREATE}; do
		[ -d "${_destdir}/${dir}" ] && continue
		mkdir -p "${_destdir}/${dir}" > /dev/null 2>&1
	done

	# Select the Default configuration to install.
	case "${_model}" in
	"1100"|"2100"|"3100"|"4100"|"4200"|"5100"|"6100"|"6200"|"7100"|"8200")
		CONFIG_PKG="pfSense-default-config-serial"
		;;
	"RCC"|"RCC-VE"|"SG-2220")
		CONFIG_PKG="pfSense-default-config-serial"
		;;
	*)
		CONFIG_PKG="pfSense-default-config"
		;;
	esac

	#
	# Keep a pkg.conf backup.
	# Some of the operations bellow will overwrite it.
	#
	/bin/cp "${_destdir}/usr/local/etc/pkg.conf" "${_destdir}/usr/local/etc/pkg.conf.bkp"

	while read PKG MSG; do
		[ -z "${PKG}" ] || [ -z "${MSG}" ] && \
		    continue;
		echo
		echo "Installing ${MSG}"
		echo
		if ! /usr/bin/env ASSUME_ALWAYS_YES=YES \
		    /usr/local/sbin/pkg-static -c "${_destdir}" \
		    install -f "${PKG}"; then
			exit 1
		fi
		/bin/cp "${_destdir}/usr/local/etc/pkg.conf.bkp" \
		    "${_destdir}/usr/local/etc/pkg.conf"
	done <<EOF
	pkg				pkg
	pfSense-base			pfSense base
	pfSense-kernel-pfSense		pfSense kernel
	${CONFIG_PKG}			pfSense Default configuration
	pfSense				pfSense packages
EOF

	if [ -n "${ADDITIONAL_PACKAGES}" ]; then
		echo
		echo "Installing the additional pfSense packages"
		echo
		for _ADD_PKG in ${ADDITIONAL_PACKAGES}; do
			if ! /usr/local/sbin/pkg-static -c "${_destdir}" \
			    rquery "%n" "${_ADD_PKG}" > /dev/null; then
				continue
			fi
			if ! /usr/bin/env ASSUME_ALWAYS_YES=YES \
			    /usr/local/sbin/pkg-static -c "${_destdir}" \
			    install -f "${_ADD_PKG}"; then
				exit 1
			fi
		done
	fi
	/bin/rm "${_destdir}/usr/local/etc/pkg.conf.bkp"
	return 0
}


#
# Main
#

unset CFG_ENC
unset CFG_DEV
unset CFG_DIR
unset CFG_TYPE
unset DESTDIR
unset MODEL
unset VERSION

while getopts em:r:t:D:M:R:V: opt; do
	case "${opt}" in
	"e")
		CFG_ENC=1
		shift
		;;
	"r")
		CFG_DEV="${OPTARG}"
		shift 2
		;;
	"t")
		CFG_TYPE="${OPTARG}"
		shift 2
		;;
	"D")
		DESTDIR="${OPTARG}"
		shift 2
		;;
	"M")
		MODEL="${OPTARG}"
		shift 2
		;;
	"R")
		CFG_DIR="${OPTARG}"
		shift 2
		;;
	"V")
		VERSION="${OPTARG}"
		shift 2
		;;
	*)
		exit 1
		;;
	esac
done

if [ -z "${DESTDIR}" ]; then
	echo "Error: No destination path."
	exit 1
fi

[ -n "${MODEL}" ] && \
    led_installing "${MODEL}"

[ -n "${VERSION}" ] && \
    printf "\nInstalling %s\n" "${VERSION}"

if [ -n "${CFG_ENC}" ] && [ "${CFG_ENC}" = 1 ]; then
	ENC_LABEL="encrypted "
else
	ENC_LABEL=""
fi
if [ -n "${CFG_DEV}" ] && [ -n "${CFG_TYPE}" ] && [ "${CFG_TYPE}" = "RECOVERED" ]; then
	printf "\nSelected %sconfiguration file: Recovered from existing installation (%s).\n" \
	    "${ENC_LABEL}" "${CFG_DEV}"
elif [ -n "${CFG_DIR}" ] && [ -n "${CFG_TYPE}" ] && [ "${CFG_TYPE}" = "MEDIA" ]; then
	if [ "${CFG_DIR}" = "root" ]; then
		CFG_DIR_LABEL="/"
	else
		CFG_DIR_LABEL="/${CFG_DIR}/"
	fi
	printf "\nSelected %sconfiguration file: Restore from installation media (%sconfig.xml).\n" \
	    "${ENC_LABEL}" "${CFG_DIR_LABEL}"
else
	printf "\nSelected configuration file: default (blank) configuration.\n"
fi

# Setup the chroot.
if ! chroot_setup "${DESTDIR}"; then
	echo "Error: Failed to set up the pkg chroot environment."
	exit 1
fi

# Install pfSense packages
if ! pfSense_install "${DESTDIR}" "${MODEL}"; then
	echo "Error: Failed to install pfSense."
	exit 1
fi

# Remove unecessary files, unmount the devfs.
if ! chroot_cleanup; then
	echo "Error: Failed to clean up the pkg chroot environment."
	exit 1
fi

exit 0
